name: CMake

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest]

    steps:
    - name: CCache
      id: cache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ hashFiles('hashFile.txt') }}
        restore-keys: ${{ runner.os }}-ccache-

    - name: Cache PIP (Linux)
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PIP (OSX)
      uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Clone PHARE
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - uses: actions/setup-python@v2

    - name: Install system deps (openmpi, hdf5, ccache,...)
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y libopenmpi-dev openmpi-bin libhdf5-openmpi-dev ccache
        else
          brew reinstall gcc
          brew install open-mpi hdf5-mpi ccache
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        fi

    - name: Ensure ccache uses ~/.ccache
      run: |
          mkdir -p ~/.ccache
          ccache --set-config=cache_dir=~/.ccache
          ccache --get-config=cache_dir

    - name: Install python deps
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      shell: bash
      run: ctest -C $BUILD_TYPE
